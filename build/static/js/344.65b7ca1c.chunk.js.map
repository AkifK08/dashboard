{"version":3,"file":"static/js/344.65b7ca1c.chunk.js","mappings":"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","sources":["utils/helpers.js","Comp/HomeComp.js","Component.js/TitleCard.js"],"sourcesContent":["\nimport axios from 'axios';\n\n\n\nexport const baseURL = 'https://api-nerdtech.herdhelp.com/dashboard'\nlet headers = {};\nconst axiosIns = axios.create({\n    baseURL: 'https://api-nerdtech.herdhelp.com/dashboard',\n    headers,\n});\n\naxiosIns.interceptors.request.use(\n\n    async (config) => {\n        const access = localStorage.getItem(\"access\");\n        if (access) {\n            config.headers.Authorization = `Bearer ${access}`;\n        }\n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    },\n);\n\naxiosIns.interceptors.response.use(\n    (response) =>\n        new Promise((resolve, reject) => {\n            resolve(response);\n        }),\n    (error) => {\n        if (!error.response) {\n            return new Promise((resolve, reject) => {\n                reject(error);\n            });\n        }\n        if (error.response.status === 401) {\n            console.log(\"401\");\n        } else {\n            return new Promise((resolve, reject) => {\n                reject(error);\n            });\n        }\n    },\n);\n\nexport default axiosIns;","import React from 'react'\nimport { TitleCard } from '../Component.js/TitleCard'\nimport { COLORS, FONTS } from '../Theme/Theme'\nimport useMediaQuery from '../utils/useMediaQuery'\nimport { AiOutlineUser,AiOutlineMobile } from \"react-icons/ai\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, PieChart, Pie, Cell } from 'recharts';\nimport { TbPig } from 'react-icons/tb'\nimport axiosIns from '../utils/helpers';\nimport { MdOutlinePaid } from \"react-icons/md\";\nimport { useDispatch } from 'react-redux';\nimport { getAnimals } from '../Store/actions';\n\nexport default function HomeComp() {\n    const [Animal, setAnimal] = React.useState([])\n    const [User, setUser] = React.useState([])\n    const dispatch = useDispatch()\n    function getAnimal() {\n        var animal = []\n        axiosIns.get(\"/animalcount/\").then((res) => {\n            Object.entries(res.data).forEach(([k, v]) => {\n                animal.push({\n                    'name': k,\n                    'count': v\n                })\n            })\n            dispatch(getAnimals(animal))\n            setAnimal(animal)\n        })\n    }\n    function getUser() {\n        axiosIns.get(\"/getusersmonthly/\").then((res) => {\n            setUser(res.data)\n        }).catch((err) => {\n            console.log(err)\n        })\n    }\n\n    React.useEffect(() => {\n        getUser()\n        getAnimal()\n    }, [])\n\n\n    const matches = useMediaQuery('(min-width:819px)')\n    const mobile = useMediaQuery('(min-width:600px)')\n    const CustomTooltip = ({ active, payload, label }) => {\n        if (active && payload && payload.length) {\n            return (\n                <div style={{\n                    backgroundColor: COLORS.transparentPrimary2,\n                    ...FONTS.h3,\n                    padding: \"2px\",\n                    borderRadius: \"2px\"\n                }}>\n                    <p className=\"label\">{`${label} : ${payload[0].value} ${\"User\"}`}</p>\n                </div>\n            );\n        }\n\n        return null;\n    };\n\n    \n    const Wdata = [\n        {\n            name: 'Sun',\n            student: 11,\n            fees: 120\n        },\n        {\n            name: 'Mon',\n            student: 15,\n            fees: 12\n        },\n        {\n            name: 'Tue',\n            student: 5,\n            fees: 10\n        },\n        {\n            name: 'Wed',\n            student: 10,\n            fees: 5\n        },\n        {\n            name: 'Thu',\n            student: 9,\n            fees: 4\n        },\n        {\n            name: 'Fri',\n            student: 10,\n            fees: 8\n        },\n        {\n            name: 'Sat',\n            student: 3,\n            fees: 5\n        },\n    ];\n\n    const pieData = [\n        { name: 'Android', value: 300 },\n        { name: 'IOS', value: 300 },\n    ]\n    const color = [COLORS.transparentPrimary, COLORS.transparentPrimary2, '#FFBB28', '#FF8042']\n    const RADIAN = Math.PI / 180;\n    const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, name, index }) => {\n        const radius = innerRadius + (outerRadius - innerRadius) * 0.3;\n        const x = cx + radius * Math.cos(-midAngle * RADIAN);\n        const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n        return (\n            <text\n                style={{\n                    ...FONTS.h3,\n                }}\n                x={x - 15} y={y} fill={COLORS.black} textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n                {`${name} ${(percent * 100).toFixed(0)}%`}\n            </text>\n        );\n    };\n    return (\n\n        <div style={{\n            marginTop: 0,\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            backgroundColor: COLORS.layout,\n            ...FONTS.body2,\n            paddingBlockStart: 10,\n            paddingBlockEnd: 70\n        }}>\n            <TitleCard\n                Icon={AiOutlineUser}\n                label={\"Active Users\"}\n                onPress={() => {\n                    // alert(\"Active User\")\n                }}\n                appendComponent={\n                    <LineChart width={mobile ? !matches ? 700 : 900 : 350} height={400} data={User} margin={{ top: 25, right: 30, bottom: mobile ? 10 : 50, left: -15 }} >\n                        <CartesianGrid strokeDasharray=\"3 3\" stroke={COLORS.transparentPrimary} />\n                        <XAxis dataKey={\"date\"} angle={matches ? 0 : -270} tickMargin={matches ? 10 : 30} style={{\n                            ...FONTS.h4,\n                            backgroundColor: COLORS.Primary\n                        }}\n                        />\n                        <YAxis\n                            style={{\n                                ...FONTS.h4,\n\n                            }}\n                        />\n\n                        <Tooltip content={<CustomTooltip />} />\n                        {/* <Legend/> */}\n                        <Line type=\"monotoneX\" dataKey=\"count\" stroke={COLORS.Primary} strokeWidth={2}\n                            dot={{ stroke: COLORS.Primary, strokeWidth: 1, r: 5, strokeDasharray: '' }}\n\n                        />\n                    </LineChart>\n                }\n            />\n            <TitleCard\n                // Icon={AiOutlineUser}\n                // label={\"New Users\"}\n                onPress={() => {\n                    // alert(\"Active User\")\n                }}\n                appendComponent={\n                    <div style={{\n                        display: \"flex\",\n                        // alignItems:\"center\",\n                        flexDirection: !mobile ? \"column\" : \"row\"\n                    }}>\n                        <div>\n                            <p style={{\n                                display: \"flex\",\n                                justifyContent: \"flex-start\",\n                                alignItems: \"center\",\n                                alignSelf: \"flex-start\",\n                                paddingInline: 20,\n                                paddingBlock: 5,\n                                ...FONTS.body2,\n                                color: COLORS.gray\n                            }}>\n                                <MdOutlinePaid size={26} color={COLORS.gray} />&nbsp;{\"Suscribed Users\"}\n                            </p>\n                            <LineChart width={mobile ? !matches ? 700 : 500 : 350} height={400} data={Wdata} margin={{ top: 25, right: 30, bottom: mobile ? 10 : 50, left: -15 }} >\n                                <CartesianGrid strokeDasharray=\"3 3\" stroke={COLORS.transparentPrimary} />\n                                <XAxis dataKey={\"name\"} angle={matches ? 0 : -270} tickMargin={matches ? 10 : 30} style={{\n\n                                    ...FONTS.h4,\n                                    backgroundColor: COLORS.Primary\n                                }}\n                                />\n                                <YAxis\n                                    style={{\n                                        ...FONTS.h4,\n\n                                    }}\n                                />\n\n                                <Tooltip content={<CustomTooltip />} />\n                                {/* <Legend/> */}\n                                <Line type=\"monotoneX\" dataKey=\"student\" stroke={COLORS.Primary} strokeWidth={2}\n                                    dot={{ stroke: COLORS.Primary, strokeWidth: 1, r: 5, strokeDasharray: '' }}\n\n                                />\n                            </LineChart>\n                        </div>\n                        \n                        <div style={{\n                            // height: 2.5,\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            width: \"2.5px\",\n                            backgroundColor: COLORS.lightGray1\n                        }} />\n                        <div>\n                            <p style={{\n                                display: \"flex\",\n                                justifyContent: \"flex-start\",\n                                alignItems: \"center\",\n                                alignSelf: \"flex-start\",\n                                paddingInline: 20,\n                                paddingBlock: 5,\n                                ...FONTS.body2,\n                                color: COLORS.gray\n                            }}>\n                                <AiOutlineMobile size={26} color={COLORS.gray} />&nbsp;{\"User Device\"}\n                            </p>\n                        <PieChart width={mobile ? !matches ? 700 : 500 : 350} height={350}>\n                            <Pie\n                                labelLine={false}\n                                paddingAngle={5}\n                                label={renderCustomizedLabel}\n                                isAnimationActive={false}\n                                data={pieData} dataKey=\"value\" cx=\"50%\" cy=\"50%\" outerRadius={120} innerRadius={60}>\n                                {pieData.map((entry, index) => (\n                                    <Cell key={`cell-${index}`} fill={color[index % color.length]} />\n                                ))}\n                            </Pie>\n                            {/* <Tooltip/> */}\n                        </PieChart>\n                        </div>\n                        {/* </ResponsiveContainer> */}\n\n\n                    </div>\n                }\n            />\n            <TitleCard\n                Icon={TbPig}\n                label={\"Animals\"}\n                onPress={() => {\n                    // alert(\"Active User\")\n                }}\n                appendComponent={\n                    <LineChart width={mobile ? !matches ? 700 : 900 : 350} height={400} data={Animal} margin={{ top: 25, right: 30, bottom: mobile ? 10 : 50, left: -15 }} >\n                        <CartesianGrid strokeDasharray=\"3 3\" stroke={COLORS.transparentPrimary} />\n                        <XAxis dataKey={\"name\"} angle={matches ? 0 : -270} tickMargin={matches ? 10 : 30} style={{\n                            ...FONTS.h4,\n                            backgroundColor: COLORS.Primary\n                        }}\n                        />\n                        <YAxis\n                            style={{\n                                ...FONTS.h4,\n\n                            }}\n                        />\n\n                        <Tooltip content={<CustomTooltip />} />\n                        {/* <Legend/> */}\n                        <Line type=\"monotoneX\" dataKey=\"count\" stroke={COLORS.Primary} strokeWidth={2}\n                            dot={{ stroke: COLORS.Primary, strokeWidth: 1, r: 5, strokeDasharray: '' }}\n\n                        />\n                    </LineChart>\n                }\n            />\n        </div>\n\n\n    )\n}\n\n","import React from 'react'\nimport { COLORS,FONTS } from '../Theme/Theme'\nimport '../CSS/constant.css'\nimport useMediaQuery from '../utils/useMediaQuery'\nexport const TitleCard = ({\n    container,\n    label,\n    Icon,\n    appendComponent,\n    onPress\n}) => {\n  const matches = useMediaQuery('(min-width:819px)')\n  const mobile = useMediaQuery('(min-width:600px)')\n\n\n  return (\n    <button \n    className='button'\n    style={{\n        display:\"flex\",\n        flexDirection:\"column\",\n        justifyContent:\"space-evenly\",\n        alignItems:\"center\",\n        // height:\"150px\",\n        width:mobile ? !matches ? 700 : 1000 : 350,\n        margin:10,\n        backgroundColor:COLORS.white,\n        borderRadius:3,\n        alignSelf:\"center\",\n        ...container\n      }}\n      onClick={onPress}\n      >\n        {\n          label?\n          <p style={{\n            display:\"flex\",\n            justifyContent:\"flex-start\",\n            alignItems:\"center\",\n            alignSelf:\"flex-start\",\n            paddingInline:20,\n            paddingBlock:5,\n            ...FONTS.body2,\n            color:COLORS.gray\n        }}>\n           <Icon size={26} color={COLORS.gray} />&nbsp;{label}\n        </p>:null\n        }\n        \n        \n        {appendComponent}\n      </button>\n  )\n}\n"],"names":["axiosIns","axios","baseURL","headers","interceptors","request","use","config","access","localStorage","getItem","Authorization","error","Promise","reject","response","resolve","status","console","log","HomeComp","React","Animal","setAnimal","User","setUser","dispatch","useDispatch","then","res","data","catch","err","animal","Object","entries","forEach","k","v","push","getAnimals","getAnimal","matches","useMediaQuery","mobile","CustomTooltip","active","payload","label","length","style","backgroundColor","COLORS","FONTS","padding","borderRadius","className","value","pieData","name","color","RADIAN","Math","PI","marginTop","display","flexDirection","justifyContent","alignItems","paddingBlockStart","paddingBlockEnd","TitleCard","Icon","AiOutlineUser","onPress","appendComponent","LineChart","width","height","margin","top","right","bottom","left","CartesianGrid","strokeDasharray","stroke","XAxis","dataKey","angle","tickMargin","YAxis","Tooltip","content","Line","type","strokeWidth","dot","r","alignSelf","paddingInline","paddingBlock","size","student","fees","PieChart","Pie","labelLine","paddingAngle","cx","cy","midAngle","innerRadius","outerRadius","percent","radius","index","x","cos","y","sin","fill","textAnchor","dominantBaseline","toFixed","isAnimationActive","map","entry","Cell","TbPig","container","onClick"],"sourceRoot":""}